#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

// Task structure to hold task details
struct Task {
    string description;
    bool completed;

    // Constructor
    Task(string desc) : description(desc), completed(false) {}
};

// Function declarations
void printMenu();
void addTask(vector<Task> &tasks);
void markCompleted(vector<Task> &tasks);
void printTasks(const vector<Task> &tasks);

int main() {
    vector<Task> tasks;
    bool quit = false;
    char choice;

    while (!quit) {
        printMenu();
        cin >> choice;
        cin.ignore();  // Clear the input buffer

        switch (choice) {
            case '1':
                addTask(tasks);
                break;
            case '2':
                markCompleted(tasks);
                break;
            case '3':
                printTasks(tasks);
                break;
            case 'q':
            case 'Q':
                quit = true;
                cout << "Exiting the program..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}

void printMenu() {
    cout << "\n===== To-Do List Application =====\n";
    cout << "1. Add a task\n";
    cout << "2. Mark a task as completed\n";
    cout << "3. View tasks\n";
    cout << "Q. Quit the program\n";
    cout << "==================================\n";
    cout << "Enter your choice: ";
}

void addTask(vector<Task> &tasks) {
    string description;
    cout << "Enter task description: ";
    getline(cin, description);

    tasks.push_back(Task(description));
    cout << "Task added successfully!\n";
}

void markCompleted(vector<Task> &tasks) {
    if (tasks.empty()) {
        cout << "No tasks available to mark as completed.\n";
        return;
    }

    int index;
    cout << "Enter task number to mark as completed (1-" << tasks.size() << "): ";
    cin >> index;
    cin.ignore();  // Clear the input buffer

    if (index < 1 || index > tasks.size()) {
        cout << "Invalid task number.\n";
    } else {
        tasks[index - 1].completed = true;
        cout << "Task marked as completed!\n";
    }
}

void printTasks(const vector<Task> &tasks) {
    if (tasks.empty()) {
        cout << "No tasks available.\n";
    } else {
        cout << "\nCurrent Tasks:\n";
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". ";
            if (tasks[i].completed) {
                cout << "[X] ";
            } else {
                cout << "[ ] ";
            }
            cout << tasks[i].description << endl;
        }
    }
}
